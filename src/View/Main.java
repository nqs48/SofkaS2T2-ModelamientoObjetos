package View;

import Model.Exc1.*;
import Model.Exc1.MenuExc1;
import Model.Exc2.MenuExc2;
import Model.MainMenu;

import javax.swing.plaf.synth.SynthEditorPaneUI;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        String separator="\n==================================================";
        PlanetarySystem solarSystem= new PlanetarySystem();
        MainMenu menu = new MainMenu();
        MenuExc1 menuExc1 = new MenuExc1();
        MenuExc2 menuExc2= new MenuExc2();

        int userPreload,userMain, userMainE1, userCreate,userView,userMainE2;
        int autogeneratedID;
        do{
            userPreload = menu.printPreloadMenu(separator);
            switch (userPreload){
                case 1 -> {
                    System.out.println("\n\t>> Library init with Preloaded data:");
                    solarSystem.preLoadedData();
                }
                case 2 ->  System.out.println("\n>> Library init empty");
                default -> System.out.println("\n>> Invalid Selection, try again");
            }
        }while (userPreload != 1 && userPreload !=2);
        do {
            userMain= menu.printMainMenu(separator);
            switch (userMain) {
                case 1 -> {
                    do {
                        userMainE1 = menuExc1.printMainMenuEX1(separator);
                        switch (userMainE1) {
                            case 1 -> {
                                do {
                                    userCreate = menuExc1.createCelestialBody(separator);
                                    switch (userCreate) {
                                        case 1 -> {
                                            Planet planet = new Planet();
                                            System.out.println("\n\n\t\t\t\t+CREATE PLANET" + separator);
                                            try {
                                                planet = (Planet) planet.requestData("planet");
                                                autogeneratedID = solarSystem.getAllBodies().size();
                                                planet.setId(autogeneratedID);
                                                System.out.println("\n\t>> The Planet -" + planet.getName() + "- was created successfully!!\n");
                                                solarSystem.setAllBodies(planet);
                                                solarSystem.setPlanet(planet);
                                                planet.showInformation();
                                            } catch (InputMismatchException e) {
                                                System.out.println("\n\tIncorrect selection data, try again.\n\nError: \n" + e);
                                            }
                                        }
                                        case 2 -> {
                                            Star star = new Star();
                                            System.out.println("\n\n\t\t\t\t+CREATE STAR" + separator);
                                            try {
                                                star = (Star) star.requestData("star");
                                                autogeneratedID = solarSystem.getAllBodies().size();
                                                star.setId(autogeneratedID);
                                                System.out.println("\n\t>> The Star -" + star.getName() + "- was created successfully!!\n");
                                                solarSystem.setAllBodies(star);
                                                solarSystem.setStar(star);
                                                star.showInformation();
                                            } catch (InputMismatchException e) {
                                                System.out.println("\n\tIncorrect selection data, try again.\n\nError: \n" + e);
                                            }
                                        }
                                        case 3 -> {
                                            Asteroid asteroid = new Asteroid();
                                            System.out.println("\n\n\t\t\t\t+CREATE ASTEROID" + separator);
                                            try {
                                                asteroid = (Asteroid) asteroid.requestData("asteroid");
                                                autogeneratedID = solarSystem.getAllBodies().size();
                                                asteroid.setId(autogeneratedID);
                                                System.out.println("\n\t>> The Asteroid -" + asteroid.getName() + "- was created successfully!!\n");
                                                solarSystem.setAllBodies(asteroid);
                                                solarSystem.setAsteroid(asteroid);
                                                asteroid.showInformation();
                                            } catch (InputMismatchException e) {
                                                System.out.println("\n\tIncorrect selection data, try again.\n\nError: \n" + e);
                                            }
                                        }
                                        case 4 -> {
                                            Sun sun = new Sun();
                                            System.out.println("\n\n\t\t\t\t+CREATE SUN" + separator);
                                            try {
                                                sun = (Sun) sun.requestData("sun");
                                                autogeneratedID = solarSystem.getAllBodies().size();
                                                sun.setId(autogeneratedID);
                                                System.out.println("\n\t>> The Sun -" + sun.getName() + "- was created successfully!!\n");
                                                solarSystem.setAllBodies(sun);
                                                solarSystem.setSun(sun);
                                                sun.showInformation();
                                            } catch (InputMismatchException e) {
                                                System.out.println("\n\tIncorrect selection data, try again.\n\nError: \n" + e);
                                            }
                                        }
                                        case 5 -> {
                                            Moon moon = new Moon();
                                            System.out.println("\n\n\t\t\t\t+CREATE MOON" + separator);
                                            try {
                                                moon = (Moon) moon.requestData("moon");
                                                autogeneratedID = solarSystem.getAllBodies().size();
                                                moon.setId(autogeneratedID);
                                                System.out.println("\n\t>> The Moon -" + moon.getName() + "- was created successfully!!\n");
                                                solarSystem.setAllBodies(moon);
                                                moon.showInformation();
                                            } catch (InputMismatchException e) {
                                                System.out.println("\n\tIncorrect selection data, try again.\n\nError: \n" + e);
                                            }
                                        }
                                    }
                                } while (userCreate != 6);
                            }
                            case 2 -> {
                                do {
                                    userView = menuExc1.viewCelestialBody(separator);
                                    switch (userView) {
                                        case 1 -> {
                                            if (solarSystem.getPlanets().size() == 0) {
                                                System.out.println("\n\tThere aren't data, Add a new PLANET!!  \n");
                                            } else {
                                                System.out.println("\n\n\t\t\t\t+VIEW ALL PLANETS: "+ solarSystem.getPlanets().size()+ separator);
                                                ArrayList<Planet> planets = solarSystem.getPlanets();
                                                planets.forEach(Planet::showInformation);
                                            }
                                        }
                                        case 2 -> {
                                            if (solarSystem.getStars().size() == 0) {
                                                System.out.println("\n\tThere aren't data, Add a new STAR!!  \n");
                                            } else {
                                                System.out.println("\n\n\t\t\t\t+VIEW ALL STARS: " +solarSystem.getStars().size()+ separator);
                                                ArrayList<Star> stars = solarSystem.getStars();
                                                stars.forEach(Star::showInformation);
                                            }
                                        }
                                        case 3 -> {
                                            if (solarSystem.getAsteroids().size() == 0) {
                                                System.out.println("\n\tThere aren't data, Add a new ASTEROID!!  \n");
                                            } else {
                                                System.out.println("\n\n\t\t\t\t+VIEW ALL ASTEROIDS: " +solarSystem.getAsteroids().size()+ separator);
                                                ArrayList<Asteroid> asteroids = solarSystem.getAsteroids();
                                                asteroids.forEach(Asteroid::showInformation);
                                            }
                                        }
                                        case 4 -> {
                                            if (solarSystem.getSuns().size() == 0) {
                                                System.out.println("\n\tThere aren't data, Add a new SUN!!  \n");
                                            } else {
                                                System.out.println("\n\n\t\t\t\t+VIEW ALL SUNS: " +solarSystem.getSuns().size()+ separator);
                                                ArrayList<Sun> suns = solarSystem.getSuns();
                                                suns.forEach(Sun::showInformation);
                                            }
                                        }
                                        case 5 -> {
                                            if (solarSystem.getMoons().size() == 0) {
                                                System.out.println("\n\tThere aren't data, Add a new MOON!!  \n");
                                            } else {
                                                System.out.println("\n\n\t\t+VIEW ALL MOONS: " +solarSystem.getMoons().size()+ separator);
                                                ArrayList<Moon> moons = solarSystem.getMoons();
                                                moons.forEach(Moon::showInformation);
                                            }
                                        }
                                        case 6 -> {
                                            if (solarSystem.getAllBodies().size() == 0) {
                                                System.out.println("\n\tThere aren't data!!  \n");
                                            } else {
                                                System.out.println("\n\n\t\t+VIEW ALL CELESTIAL BODIES "+ solarSystem.getAllBodies().size()+ separator);
                                                solarSystem.showAllGeneralInfo();
                                            }
                                        }
                                    }
                                } while (userView != 7);
                            }
                            case 3 -> {
                                System.out.println("\n\n+GRAVITATIONAL FORCE BETWEEN BODIES OMEGA 557" + separator);
                                AbsCelestialBody calculateCB1 = solarSystem.chooseCelestialBody();
                                if(calculateCB1 != null) {
                                    System.out.println("\n>> Gravitational Force: " + calculateCB1.getName() + "  Between  => ");
                                    AbsCelestialBody calculateCB2 = solarSystem.chooseCelestialBody();
                                    if (calculateCB2 != null) {
                                        System.out.println("\nEnter the distance (mts) between: "+ calculateCB1.getName() + " and " + calculateCB2.getName());
                                        Scanner dBetween = new Scanner(System.in);
                                        double distanceBetween = dBetween.nextInt();
                                        double forceGrav= solarSystem.CalculatorGravitationalForce(calculateCB1,calculateCB2,distanceBetween);
                                        System.out.println("\n>> Gravitational Force:\n\n" + calculateCB1.getName() + "  Between  => "+ calculateCB2.getName()+
                                                "= "+ forceGrav+" N");
                                    }
                                }

                            }
                            case 4 -> {
                                System.out.println("\n\n\t\t+CALCULATOR GRAVITATIONAL FORCE" + separator);
                                try{
                                    double forceGrav= solarSystem.CalculatorGravitationalForce();
                                    System.out.println("\n>> Gravitational Force:\n\n body 1    Between  =>    body 2\n\n GF= "+ forceGrav+" N");

                                }catch(InputMismatchException e){
                                    System.out.println("\n\tIncorrect input data, try again.\n\nError: \n" + e);
                                }


                            }
                        }
                    }while (userMainE1!=5);
                }
                case 2 -> {
                    do {
                        System.out.println("\n<< Yes, is possible to have the concurrent main classes. >>");
                        userMainE2 = menuExc2.printMainMenuEX2(separator);
                        switch (userMainE2) {
                            case 1 -> {
                                System.out.println("\n\n\t\t\t\t+RUN/DEBUG CONFIGURATION" + separator);
                                try {
                                    System.out.println("\n" +
                                            "When you have more than one class with a main method, you can edit configurations in the window Run/Debug Configuration " +
                                            "on your environment indicating which of these two classes is going to be the entry point.\n\n" +
                                            "For more details, visit the README.MD file that you will find in the Exc2 package.");
                                } catch (InputMismatchException e) {
                                    System.out.println("\n\tIncorrect selection data, try again.\n\nError: \n" + e);
                                }
                            }
                            case 2 -> {

                                System.out.println("\n\n\t\t\t\t+CREATE ARTIFACT .JAR" + separator);
                                try {
                                    System.out.println("\n" +
                                            "You can do this by creating a new artifact, selecting the desired main class as the project entry point. After this, a MANIFEST" +
                                            " folder will be created,\n the project artifacts are built, generating a new folder inside the OUT folder with the built" +
                                            " artifacts and a .JAR file, which can be executed from the terminal.\n\n" +
                                            "For more details, visit the README.MD file that you will find in the Exc2 package.");

                                } catch (InputMismatchException e) {
                                    System.out.println("\n\tIncorrect selection data, try again.\n\nError: \n" + e);
                                }
                            }
                        }
                    }while (userMainE2!=3);
                }
                case 3 -> {
                    System.out.println("Exercise 3 ");
                }
                case 4 -> {
                    System.out.println("Exercise 4 ");
                }
                case 5 -> {
                    System.out.println("Exercise 5 ");
                }
                case 6 -> {
                    System.out.println("Exercise 6 ");
                }
            }
        } while (userMain != 7);


        System.out.println("\nThe program is over");
        System.out.println("\nCreated By:\t< Nestor Quiroga />");



    }


}
