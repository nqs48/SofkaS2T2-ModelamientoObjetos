package Model.Exc5;

import java.util.ArrayList;
import java.util.Scanner;

public class FerryBt {
    private int id;
    private String name;
    private int capacity;
    private String route;
    private ArrayList<AbsVehicle> allVehicles;
    private ArrayList<Truck> trucks;
    private ArrayList<Bicycle> bicycles;
    private ArrayList<Car> cars;
    private ArrayList<Boat> boats;
    private ArrayList<Motorcycle> motorcycles;

    public FerryBt() {
        this.id=1;
        this.allVehicles = new ArrayList<>();
        this.trucks = new ArrayList<>();
        this.bicycles = new ArrayList<>();
        this.cars = new ArrayList<>();
        this.boats = new ArrayList<>();
        this.motorcycles = new ArrayList<>();
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setId(int id) {
        this.id = id;
    }

    public void setCapacity(int capacity) {
        this.capacity = capacity;
    }

    public int getCapacity(){
        return capacity;
    }

    public void setRoute(String route) {
        this.route = route;
    }

    public ArrayList<AbsVehicle> getAllVehicles() { return allVehicles; }

    public void setVehicle(AbsVehicle vehicle) { this.allVehicles.add(vehicle); }

    public void setAllVehicles(ArrayList<AbsVehicle> vehicles) { this.allVehicles=vehicles; }

    public ArrayList<Truck> getTrucks() {
        return trucks;
    }

    public void setTruck(Truck truck) {
        this.trucks.add(truck);
    }

    public void setAllTrucks(ArrayList<Truck> trucks) { this.trucks=trucks; }

    public ArrayList<Bicycle> getBicycles() {
        return bicycles;
    }

    public void setBicycle(Bicycle bicycle) {
        this.bicycles.add(bicycle);
    }

    public void setAllBicycles(ArrayList<Bicycle> bicycles) { this.bicycles=bicycles; }

    public ArrayList<Car> getCars() {
        return cars;
    }

    public void setCar(Car car) {
        this.cars.add(car);
    }

    public void setAllCars(ArrayList<Car> cars) { this.cars=cars; }

    public ArrayList<Boat> getBoats() {
        return boats;
    }

    public void setBoat(Boat boat) {
        this.boats.add(boat);
    }

    public void setAllBoats(ArrayList<Boat> boats) { this.boats=boats; }

    public ArrayList<Motorcycle> getMotorcycles() { return motorcycles; }

    public void setMotorcycle(Motorcycle motorcycle) {
        this.motorcycles.add(motorcycle);
    }

    public void setAllMotorcycles(ArrayList<Motorcycle> motorcycles) { this.motorcycles=motorcycles; }

    public void requestData() {
        System.out.println("\nEnter the Ferry's name: ");
        Scanner name = new Scanner(System.in);
        String s1Name = name.nextLine();
        System.out.println("\nEnter the Ferry's capacity");
        Scanner size = new Scanner(System.in);
        int s1Size = size.nextInt();
        System.out.println("\nEnter the Ferry's route (country -> country ): ");
        Scanner route = new Scanner(System.in);
        String s1Route = route.nextLine();
        setName(s1Name);
        setCapacity(s1Size);
        setRoute(s1Route);
    }



    public void showInformation() {
        System.out.println("\n++++++++++++++ Ferry: " + this.id +" ++++++++++++++" + "\n\tName: " + this.name + "\n\tCapacity: " + capacity +
                " Vehicles\n\tRoute: " + route);
        if(allVehicles.size() > 0){
            System.out.println("\tVehicles: ");
            for (AbsVehicle j: getAllVehicles()) {
                System.out.println("\n\tId Vehicle: " + j.getId() + "\n\t\tType: " + j.getType() +
                        "\n\t\tRegistration Date: " + j.getRegistrationDate().getTime() +
                        "\n\t\tMedium Move: " + j.getMediumMove());
            }
        }else{
            System.out.println("\tVehicles: none");
        }
        System.out.print("-----------------------------------------\n\n");
    }

    public void showAllGeneralInfo(){
        for (AbsVehicle cb: allVehicles) {
            System.out.println("\n++++++++++++++ Id : " + cb.getId() +" ++++++++++++++" + "\n\tType: " + cb.getType() + "\n\tNumber Passengers: " + cb.getNumberPass() +
                    "\n\tcrew: " + cb.isCrew()+ "\n\tNumber Wheels: " + cb.getNumberWheels() + "\n\tMedium Move: " + cb.getMediumMove()+
                    "\n\tRegistration Date: " + cb.getRegistrationDate().getTime()+"\n");
            System.out.print("-----------------------------------------\n\n");
        }

    }

    public AbsVehicle createVehicle(AbsVehicle vehicle, String type, String separator){
        System.out.println("\n\n\t\t\t\t+CREATE " + type.toUpperCase()+ separator);
        vehicle = vehicle.requestData(type);
        int autogeneratedID = getAllVehicles().size();
        vehicle.setId(autogeneratedID);
        System.out.println("\n\t>> The "+type+" -" + vehicle.getId() + "- was created successfully!!\n");
        setVehicle(vehicle);
        vehicle.showInformation();
        return vehicle;
    }

//    /**
//     * Choose the song for the ID
//     * @return If found a song with this ID, return this song else returns a value null.
//     */
//    public AbsVehicle chooseCelestialBody(){
//        AbsVehicle cB;
//        if (getAllVehicles().size() > 1) {
//            System.out.println("\nCurrent Bodies : ");
//            showAllGeneralInfo();
//            System.out.println("\nEnter Body's ID to select: ");
//            Scanner idCB = new Scanner(System.in);
//            int idFilter = idCB.nextInt();
//            cB = idFilterCB(getAllVehicles(), idFilter);
//        } else {
//            System.out.println("\n\t\nThere's not enough Celestial Bodies, verify your currently DATA!!\n");
//            return null;
//        }
//        return cB;
//    }
//
//    public AbsVehicle idFilterCB(ArrayList<AbsVehicle> allBodies, int idCB) {
//        AbsVehicle findCB;
//        for (AbsVehicle cb : allBodies) {
//            if (cb.getId() == idCB) {
//                findCB = cb;
//                return findCB;
//            }
//        }
//        return null;
//    }
//
//
//    public double CalculatorGravitationalForce(){
//        double G= 6.6474*(Math.pow(10,-11));
//        System.out.println("\n>>To calculate the gravitational force, we need some data:");
//        System.out.println("\nEnter the mass 1 (kgs): ");
//        Scanner m1 = new Scanner(System.in);
//        double mass1 = m1.nextInt();
//        System.out.println("\nEnter the mass 2 (kgs): ");
//        Scanner m2 = new Scanner(System.in);
//        double mass2 = m2.nextInt();
//        System.out.println("\nEnter the distance (mts) between: 'body 1' and 'body 2'");
//        Scanner d1 = new Scanner(System.in);
//        double distance = d1.nextInt();
//        return G * mass1 * mass2 / Math.pow(distance,2);
//    }
//
//    public double CalculatorGravitationalForce(AbsVehicle CBody1, AbsVehicle CBody2, double distance){
//
//        double cbMass1= CBody1.getMass();
//        double cbMass2= CBody2.getMass();
//        double G= 6.6474*(Math.pow(10,-11));
//        return G * cbMass1 * cbMass2 / Math.pow(distance,2);
//    }

}
